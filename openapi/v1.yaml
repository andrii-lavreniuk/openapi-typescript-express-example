openapi: 3.0.3
info:
  title: Petstore - OpenAPI 3.0
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1
    description: Local server
security:
  - BearerAuth: []
tags:
  - name: Auth
    description: Everything about authentication
  - name: Pets
    description: Everything about your Pets
  - name: Store
    description: Access to Petstore orders
paths:
  /auth/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Register a new user
      operationId: signupUser
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Signup'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/signin:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      description: Logs user into the system
      operationId: signinUser
      security: []
      requestBody:
        $ref: '#/components/requestBodies/Signin'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: Access JWT token for the user
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c

        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /pets:
    post:
      tags:
        - Pets
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/CreatePet'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Pets
      summary: Finds Pets
      description: Find pets in the store by status and tags
      operationId: findPets
      parameters:
        - name: category
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: string
            enum:
              - cats
              - dogs
              - fish
              - reptiles
              - birds
              - other
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /pets/{petId}:
    get:
      tags:
        - Pets
      summary: Get pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - $ref: '#/components/parameters/petId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/PetNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Pets
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePetById
      parameters:
        - $ref: '#/components/parameters/petId'
      requestBody:
        $ref: '#/components/requestBodies/UpdatePet'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/OrderNotFoundError'
        '404':
          $ref: '#/components/responses/PetNotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Pets
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - $ref: '#/components/parameters/petId'
      responses:
        '204':
          description: Successful operation
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/OrderNotFoundError'
        '404':
          $ref: '#/components/responses/PetNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /store/orders:
    post:
      tags:
        - Store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        $ref: '#/components/requestBodies/CreateOrder'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Store
      summary: Find purchase order by status
      description: Returns purchase orders
      operationId: getOrders
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - placed
              - approved
              - canceled
              - delivered
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /store/orders/{orderId}:
    get:
      tags:
        - Store
      summary: Get order by ID
      operationId: getOrderById
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/OrderNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /store/orders/{orderId}/cancel:
    post:
      tags:
        - Store
      summary: Cancel purchase order by ID
      operationId: cancelOrder
      parameters:
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/InvalidIdError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/OrderNotFoundError'
        '404':
          $ref: '#/components/responses/OrderNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Signup:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: securepassword
    Signin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john.doe@gmail.com
        password:
          type: string
          format: password
          example: securepassword
    User:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - createdAt
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
    Pet:
      type: object
      required:
        - id
        - name
        - category
        - status
        - createdAt
      properties:
        id:
          type: string
          example: 5f5f5f5f5f5f5f5f5f5f5f5f
        name:
          type: string
          example: doggie
        category:
          type: string
          description: pet category in the store
          enum:
            - cats
            - dogs
            - fish
            - reptiles
            - birds
            - other
          example: dogs
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          example: pending
        createdAt:
          type: string
          format: date-time
          example: 2020-09-14T14:00:00.000Z
    PetCreate:
      type: object
      required:
        - name
        - category
      properties:
        name:
          type: string
          example: doggie
        category:
          type: string
          description: pet category in the store
          enum:
            - cats
            - dogs
            - fish
            - reptiles
            - birds
            - other
    PetUpdate:
      type: object
      required:
        - name
        - category
      properties:
        name:
          type: string
          example: doggie
        category:
          type: string
          description: pet category in the store
          enum:
            - cats
            - dogs
            - fish
            - reptiles
            - birds
            - other
    Order:
      type: object
      required:
        - id
        - petId
        - status
        - isComplete
        - createdAt
      properties:
        id:
          type: string
          example: 5f5f5f5f5f5f5f5f5f5f5f5f
        petId:
          type: string
          example: 5f5f5f5f5f5f5f5f5f5f5f5f
        shipDate:
          type: string
          format: date-time
          description: Order ship date
          example: 2020-09-14T14:00:00.000Z
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - canceled
            - delivered
        isComplete:
          type: boolean
        createdAt:
          type: string
          format: date-time
          example: 2020-09-14T14:00:00.000Z
    OrderCreate:
      type: object
      required:
        - petId
      properties:
        petId:
          type: string
          example: 5f5f5f5f5f5f5f5f5f5f5f5f
    AppError:
      type: object
      description: Error Response
      properties:
        code:
          type: string
          description: Error code
        description:
          type: string
          description: Error description
          nullable: true
        additionalErrors:
          type: array
          items:
            type: object
      example:
        code: '#ERR_BAD_REQUEST'
        description: 'Bad Request'
        additionalErrors: []
  parameters:
    petId:
      name: petId
      in: path
      description: ID of pet to return
      required: true
      schema:
        type: string
        example: 5f5f5f5f5f5f5f5f5f5f5f
    orderId:
      name: orderId
      in: path
      description: ID of order to return
      required: true
      schema:
        type: string
        example: 5f5f5f5f5f5f5f5f5f5f5f
  requestBodies:
    Signup:
      description: User details for registration
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Signup'
    Signin:
      description: User details for login
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Signin'
    CreatePet:
      description: Pet details for creation
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PetCreate'
    UpdatePet:
      description: Pet details for update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PetUpdate'
    CreateOrder:
      description: Order details for creation
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrderCreate'
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    ValidationError:
      description: Validation exception
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    BadRequestError:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    InvalidIdError:
      description: Invalid ID supplied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    OrderNotFoundError:
      description: Order not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    PetNotFoundError:
      description: Pet not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AppError'
